import '@/styles/reset.css'
import React from 'react'
import DefaultLayout from '@/layouts/DefaultLayout'
import { CustomAppProps } from '@/types/nextjs'
import {
	Hydrate,
	QueryClient,
	QueryClientProvider
} from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { RecoilRoot } from 'recoil'
import { CacheProvider } from '@emotion/react'
import createEmotionCache from '@/styles/createEmotionCache'
import Head from 'next/head'
import { ThemeProvider } from '@mui/material'
import theme from '@/styles/theme'

const clientStyleCache = createEmotionCache()

export default function App({
	Component,
	pageProps,
	emotionCache = clientStyleCache
}: CustomAppProps) {
	const getLayout = Component.getLayout || DefaultLayout.getLayout
	/**
	 * ssr 시 싱글톤 객체 오염 방지
	 * https://tanstack.com/query/latest/docs/react/guides/ssr
	 */
	const [queryClient] = React.useState(() => new QueryClient())
	return (
		<QueryClientProvider client={queryClient}>
			<Hydrate state={pageProps.dehydratedState}>
				<RecoilRoot>
					<CacheProvider value={emotionCache}>
						<Head>
							<title>Create Next App</title>
							<meta name="description" content="Generated by create next app" />
							<meta
								name="viewport"
								content="width=device-width, initial-scale=1"
							/>
							<link rel="icon" href="/favicon.ico" />
						</Head>
						<ThemeProvider theme={theme}>
							{getLayout(<Component {...pageProps} />)}
						</ThemeProvider>
					</CacheProvider>
				</RecoilRoot>
			</Hydrate>
			{
				// @todo 환경변수 정리된 후 profile 로 분기처리
				typeof window !== 'undefined' &&
					(window.location.hostname === 'localhost' ||
						window.location.hostname === 'biskitlocal.smiledev.net') && (
						<ReactQueryDevtools initialIsOpen={false} />
					)
			}
		</QueryClientProvider>
	)
}
